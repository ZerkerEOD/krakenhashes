# Base directory for KrakenHashes - Uses your home directory by default
# Change 'krakenhashes' to your preferred directory name
KH_BASE_DIR=$HOME/krakenhashes

# User/Group ID for file permissions
# Set these to match your host user's UID/GID for proper file permissions
# You can find these by running: id -u (for PUID) and id -g (for PGID)
PUID=1000
PGID=1000

# Debug Settings
DEBUG=false                    # Set to 'true' or '1' to enable debug output
LOG_LEVEL=INFO                # Options: DEBUG, INFO, WARNING, ERROR

# Component Debug Flags
DEBUG_SQL=false               # Enable SQL query logging
DEBUG_HTTP=false             # Enable HTTP request/response logging
DEBUG_WEBSOCKET=false        # Enable WebSocket message logging
DEBUG_AUTH=false             # Enable authentication debugging
DEBUG_JOBS=false             # Enable job processing debugging

# Database Configuration
# For Docker Compose: Use 'postgres' for the included PostgreSQL container
# For external database: Use the IP address or hostname of your database server
# For host networking: Use 'localhost' or '127.0.0.1'
DB_CONNECTION_STRING=postgres://krakenhashes:krakenhashes@postgres:5432/krakenhashes?sslmode=disable
DB_HOST=postgres              # Change to IP/hostname for external database
DB_PORT=5432
DB_NAME=krakenhashes
DB_USER=krakenhashes
DB_PASSWORD=krakenhashes

# Backend Configuration
KH_HOST=0.0.0.0              # Bind to all interfaces
KH_HTTPS_PORT=31337
KH_HTTP_PORT=1337            # HTTP port (redirects to HTTPS)
JWT_SECRET=change_this_in_production
JWT_EXPIRATION=24h

# Data Directories
# Host paths (for volume mounts)
KH_DATA_DIR_HOST=${KH_BASE_DIR}/data
KH_CONFIG_DIR_HOST=${KH_BASE_DIR}/config
# Container paths (used by backend inside Docker)
KH_DATA_DIR=/var/lib/krakenhashes
KH_CONFIG_DIR=/etc/krakenhashes

# Frontend Configuration
FRONTEND_PORT=443

# WebSocket Configuration (Agent-to-Backend Communication)
# These settings control WebSocket connections from agents to the backend on port 31337
# The frontend does NOT use WebSockets - it communicates via REST API only
KH_WRITE_WAIT=45s            # Time allowed to write messages
KH_PONG_WAIT=60s            # Time to wait for pong response
KH_PING_PERIOD=54s          # How often to send pings

# TLS Configuration
KH_TLS_MODE=self-signed      # Options: self-signed, provided, certbot

# Certificate Details
KH_CA_COUNTRY=US
KH_CA_ORGANIZATION=KrakenHashes
KH_CA_ORGANIZATIONAL_UNIT=KrakenHashes CA
KH_CA_COMMON_NAME=KrakenHashes Root CA
KH_CERT_KEY_SIZE=4096
KH_CERT_VALIDITY_DAYS=365
KH_CA_VALIDITY_DAYS=3650

# Additional Certificate Names
KH_ADDITIONAL_DNS_NAMES=localhost,krakenhashes.local
KH_ADDITIONAL_IP_ADDRESSES=127.0.0.1,::1

# Certbot Configuration (for Let's Encrypt certificates)
# Required when KH_TLS_MODE=certbot
# Note: Certbot cannot add IP addresses to certificates - access must be through domain
KH_CERTBOT_DOMAIN=                    # Your domain (e.g., kraken.example.com)
KH_CERTBOT_EMAIL=                     # Email for Let's Encrypt notifications
KH_CERTBOT_STAGING=false              # Use Let's Encrypt staging server for testing
KH_CERTBOT_AUTO_RENEW=true            # Enable automatic renewal checks
KH_CERTBOT_RENEW_HOOK=                # Optional: Custom hook script after renewal

# Cloudflare Configuration (required for DNS-01 challenge)
# Create token at: https://dash.cloudflare.com/profile/api-tokens
# Required permissions: Zone:DNS:Edit for your domain
CLOUDFLARE_API_TOKEN=                 # Your Cloudflare API token

# Nginx Configuration
NGINX_ACCESS_LOG_LEVEL=info
NGINX_ERROR_LOG_LEVEL=warn

# Log File Paths (Host paths for volume mounts)
LOG_DIR=${KH_BASE_DIR}/logs/krakenhashes
BACKEND_LOG_DIR=${LOG_DIR}/backend
FRONTEND_LOG_DIR=${LOG_DIR}/frontend
NGINX_LOG_DIR=${LOG_DIR}/nginx
POSTGRES_LOG_DIR=${LOG_DIR}/postgres