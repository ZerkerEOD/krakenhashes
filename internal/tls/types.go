package tls

import (
	"crypto/tls"
	"crypto/x509"
)

// ProviderMode represents the TLS operation mode
type ProviderMode string

const (
	// ModeSelfSigned uses self-signed certificates generated by the application
	ModeSelfSigned ProviderMode = "self-signed"
	// ModeProvided uses user-provided certificates
	ModeProvided ProviderMode = "provided"
	// ModeCertbot uses Let's Encrypt certificates via certbot
	ModeCertbot ProviderMode = "certbot"
)

// ProviderConfig holds the TLS configuration settings
type ProviderConfig struct {
	Mode ProviderMode

	// Certificate paths
	CertsDir string
	CertFile string
	KeyFile  string
	CAFile   string

	// Self-signed certificate settings
	CADetails *CertificateAuthority
	KeySize   int
	Validity  struct {
		Server int // days
		CA     int // days
	}

	// Additional Subject Alternative Names
	AdditionalDNSNames    []string
	AdditionalIPAddresses []string

	// Certbot settings
	CertbotConfig *CertbotConfig
}

// CertificateAuthority holds the configuration for CA certificate generation
type CertificateAuthority struct {
	Country            string
	Organization       string
	OrganizationalUnit string
	CommonName         string
}

// CertbotConfig holds the configuration for certbot integration
type CertbotConfig struct {
	Domain    string
	Email     string
	Staging   bool
	AutoRenew bool
	RenewHook string
}

// Provider defines the interface for different TLS providers
type Provider interface {
	// Initialize sets up the TLS provider
	Initialize() error
	// GetTLSConfig returns the TLS configuration for the server
	GetTLSConfig() (*tls.Config, error)
	// GetCACertPool returns the CA certificate pool
	GetCACertPool() (*x509.CertPool, error)
	// ExportCACertificate exports the CA certificate in PEM format
	ExportCACertificate() ([]byte, error)
	// GetClientCertificate returns the client certificate and private key in PEM format
	GetClientCertificate() ([]byte, []byte, error)
	// Cleanup performs any necessary cleanup
	Cleanup() error
}
