# HTTPS server for frontend - Let's Encrypt certificates
server {
    listen 443 ssl http2;
    server_name localhost;

    # SSL configuration for Let's Encrypt certificates
    ssl_certificate /etc/krakenhashes/certs/live/CERTBOT_DOMAIN/fullchain.pem;
    ssl_certificate_key /etc/krakenhashes/certs/live/CERTBOT_DOMAIN/privkey.pem;
    
    # SSL protocols and ciphers
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 1d;
    ssl_stapling on;
    ssl_stapling_verify on;
    
    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    root /usr/share/nginx/html;
    index index.html;

    # React router support
    location / {
        try_files $uri $uri/ /index.html;
        expires -1;
    }

    # Static files
    location /static/ {
        expires 1y;
        add_header Cache-Control "public, no-transform";
    }

    # Health check
    location = /health {
        access_log off;
        return 200 'healthy\n';
    }

    access_log /var/log/krakenhashes/nginx/access.log;
    error_log /var/log/krakenhashes/nginx/error.log debug;
}

# HTTP server - redirect to HTTPS with certbot support
server {
    listen 80;
    server_name localhost;

    # Allow certbot challenges
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    # Redirect all other traffic to HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}