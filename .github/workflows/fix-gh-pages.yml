name: Fix GitHub Pages Documentation

on:
  workflow_dispatch:
    inputs:
      clean_rebuild:
        description: 'Perform a clean rebuild of all documentation'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  fix-documentation:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history

      - name: Configure Git Credentials
        run: |
          git config user.name github-actions[bot]
          git config user.email github-actions[bot]@users.noreply.github.com

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: 'requirements-docs.txt'

      - name: Install dependencies
        run: |
          pip install -r requirements-docs.txt

      - name: Fix gh-pages branch
        run: |
          # Fetch gh-pages branch
          git fetch origin gh-pages:gh-pages
          git checkout gh-pages
          
          # Check current state
          echo "Current gh-pages structure:"
          ls -la
          
          # Fix latest if it's a symlink
          if [ -L "latest" ]; then
            echo "Found 'latest' as symlink, converting to directory"
            TARGET=$(readlink latest)
            echo "Symlink points to: $TARGET"
            
            if [ -d "$TARGET" ]; then
              rm -f latest
              cp -r "$TARGET" latest
              echo "Replaced symlink with copy of $TARGET"
            else
              echo "Warning: Target directory $TARGET not found"
              # Try to find the most recent version
              LATEST_VERSION=$(ls -d [0-9]* 2>/dev/null | sort -V | tail -n1)
              if [ -n "$LATEST_VERSION" ]; then
                echo "Using $LATEST_VERSION as latest"
                rm -f latest
                cp -r "$LATEST_VERSION" latest
              fi
            fi
          else
            echo "'latest' is not a symlink or doesn't exist"
          fi
          
          # Clean up any old documentation files in root (if they exist)
          echo "Cleaning up root directory"
          # Keep only Mike-managed files and directories
          for item in *; do
            case "$item" in
              [0-9]*|dev|latest|versions.json|index.html|.nojekyll|404.html)
                echo "Keeping: $item"
                ;;
              *)
                if [ -e "$item" ]; then
                  echo "Removing non-Mike file/directory: $item"
                  rm -rf "$item"
                fi
                ;;
            esac
          done
          
          # Ensure .nojekyll exists
          touch .nojekyll
          
          # Ensure proper index.html redirect exists
          if [ ! -f "index.html" ] || ! grep -q "window.location.replace" index.html; then
            echo "Creating proper index.html redirect"
            cat > index.html << 'EOF'
<!DOCTYPE html>
<html>
<head>
    <title>Redirecting...</title>
    <meta charset="utf-8">
    <meta http-equiv="refresh" content="1; url=latest/">
    <script>
        window.location.replace("latest/" + window.location.search + window.location.hash);
    </script>
</head>
<body>
    <p>Redirecting to latest documentation...</p>
</body>
</html>
EOF
          fi
          
          # Commit changes if any
          git add -A
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Fix gh-pages structure for proper GitHub Pages deployment"
            git push origin gh-pages
            echo "Changes pushed to gh-pages"
          fi
          
          git checkout -
          
          # If clean rebuild requested, redeploy current version
          if [ "${{ github.event.inputs.clean_rebuild }}" = "true" ]; then
            echo "Performing clean rebuild of documentation"
            
            # Get current version from versions.json
            CURRENT_VERSION=$(cat versions.json | python -c "import json, sys; print(json.load(sys.stdin)['backend'])")
            echo "Current version: $CURRENT_VERSION"
            
            # Redeploy current version as latest
            mike deploy --push --update-aliases "$CURRENT_VERSION" latest
            mike set-default --push "$CURRENT_VERSION"
            
            # Redeploy dev
            mike deploy --push --update-aliases dev
            
            # Fix latest symlink again after Mike deployment
            git fetch origin gh-pages:gh-pages
            git checkout gh-pages
            
            if [ -L "latest" ]; then
              rm -f latest
              cp -r "$CURRENT_VERSION" latest
              git add -A
              git commit -m "Replace latest symlink with directory after rebuild"
              git push origin gh-pages
            fi
            
            git checkout -
          fi
          
          echo "Documentation fix complete!"
          echo "Available versions:"
          mike list

      - name: Trigger GitHub Pages rebuild
        run: |
          # Create a dummy file to trigger Pages rebuild
          git checkout gh-pages
          echo "$(date)" > .rebuild_trigger
          git add .rebuild_trigger
          git commit -m "Trigger GitHub Pages rebuild"
          git push origin gh-pages
          
          # Remove the trigger file
          git rm .rebuild_trigger
          git commit -m "Clean up rebuild trigger"
          git push origin gh-pages
          
          git checkout -

      - name: Create summary
        run: |
          echo "## GitHub Pages Fix Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Fixed gh-pages branch structure" >> $GITHUB_STEP_SUMMARY
          echo "✅ Replaced symlinks with actual directories" >> $GITHUB_STEP_SUMMARY
          echo "✅ Triggered GitHub Pages rebuild" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Available Versions:" >> $GITHUB_STEP_SUMMARY
          mike list >> $GITHUB_STEP_SUMMARY || echo "Mike not available" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Important URLs:" >> $GITHUB_STEP_SUMMARY
          echo "- Main site: https://zerkereod.github.io/krakenhashes/" >> $GITHUB_STEP_SUMMARY
          echo "- Dev version: https://zerkereod.github.io/krakenhashes/dev/" >> $GITHUB_STEP_SUMMARY
          echo "- Direct latest: https://zerkereod.github.io/krakenhashes/latest/" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "⏳ **Note**: GitHub Pages may take a few minutes to rebuild and serve the updated content." >> $GITHUB_STEP_SUMMARY