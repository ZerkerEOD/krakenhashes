name: Deploy Documentation Version

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy (e.g., 0.15.8)'
        required: true
        type: string
      set_as_latest:
        description: 'Set this version as latest'
        required: true
        type: boolean
        default: true

permissions:
  contents: write

jobs:
  deploy-version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for git-revision-date-localized plugin

      - name: Configure Git Credentials
        run: |
          git config user.name github-actions[bot]
          git config user.email github-actions[bot]@users.noreply.github.com

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: 'requirements-docs.txt'

      - name: Install dependencies
        run: |
          pip install -r requirements-docs.txt

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
            SET_LATEST="${{ github.event.inputs.set_as_latest }}"
          else
            # Extract version from tag (remove 'v' prefix)
            VERSION="${GITHUB_REF#refs/tags/v}"
            SET_LATEST="true"
          fi
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
          echo "SET_LATEST=${SET_LATEST}" >> $GITHUB_OUTPUT
          echo "Deploying documentation version: ${VERSION}"
          echo "Set as latest: ${SET_LATEST}"

      - name: Deploy versioned documentation
        run: |
          VERSION="${{ steps.version.outputs.VERSION }}"
          SET_LATEST="${{ steps.version.outputs.SET_LATEST }}"
          
          # Fetch all branches including gh-pages
          git fetch origin
          
          # Check if gh-pages exists remotely and sync it
          if git ls-remote --heads origin gh-pages | grep -q gh-pages; then
            echo "gh-pages branch exists, checking out and pulling latest"
            git checkout gh-pages
            git pull origin gh-pages
            git checkout -
          else
            echo "No gh-pages branch exists yet"
          fi
          
          # Deploy the specific version
          if [ "${SET_LATEST}" = "true" ]; then
            echo "Deploying version ${VERSION} and updating latest alias"
            mike deploy --push --update-aliases "${VERSION}" latest
            mike set-default --push "${VERSION}"
            
            # Fix latest symlink for GitHub Pages
            echo "Fixing latest symlink for GitHub Pages compatibility"
            
            # Clean up the site directory that Mike created to avoid conflicts
            rm -rf site
            
            git fetch origin gh-pages:gh-pages
            git checkout gh-pages
            
            # Remove symlink and copy actual version directory
            if [ -L "latest" ]; then
              rm -f latest
              cp -r "${VERSION}" latest
              git add -A
              git commit -m "Replace latest symlink with directory copy for version ${VERSION}"
              git push origin gh-pages
            fi
            
            git checkout -
          else
            echo "Deploying version ${VERSION} without updating latest"
            mike deploy --push --update-aliases "${VERSION}"
          fi
          
          # List all versions for verification
          echo "Current versions:"
          mike list

      - name: Create deployment summary
        run: |
          VERSION="${{ steps.version.outputs.VERSION }}"
          echo "## Documentation Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "âœ… Successfully deployed documentation version **${VERSION}**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Access URLs:" >> $GITHUB_STEP_SUMMARY
          echo "- Version URL: https://zerkereod.github.io/krakenhashes/${VERSION}/" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.version.outputs.SET_LATEST }}" = "true" ]; then
            echo "- Latest URL: https://zerkereod.github.io/krakenhashes/ (redirects to ${VERSION})" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Available Versions:" >> $GITHUB_STEP_SUMMARY
          mike list >> $GITHUB_STEP_SUMMARY